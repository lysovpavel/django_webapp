image: docker:latest

variables:
  DOCKER_DRIVER: overlay
  CONTAINER_TEST_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:latest

services:
  - docker:dind

stages:
  - build
  - test
  # - release
  # - deploy

build:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CONTAINER_TEST_IMAGE . --build-arg=secret_key=secret
    - docker push $CONTAINER_TEST_IMAGE
  only:
    - staging
    - master

test:
  image: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME
  stage: test
  services:
    - postgres:11-alpine
  variables:
    SECRET_KEY: runner
    POSTGRES_DB: runner
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: runner
    POSTGRES_HOST: postgres
    POSTGRES_PORT: ''
    TEST: 1
  script:
    - python3 ./backend/manage.py qa

release-image:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    - staging
    - master

# deploy to staging:
#   image: garpix/gitlab_deploy
#   stage: deploy
#   script:
#     - eval $(ssh-agent -s)
      # DONT FORGET TO ADD SSH_PRIVATE_KEY
#     - ssh-add <(echo "$SSH_PRIVATE_KEY")
#     - ssh -o StrictHostKeyChecking=no -p 9022 garpix@host.staging.garpix.com bash /home/garpix/www/SET_INSTALATION_PATH/deploy.sh
#   only:
#     - staging

# deploy to production:
#   image: garpix/gitlab_deploy
#   stage: deploy
#   script:
#     - eval $(ssh-agent -s)
#     - ssh-add <(echo "$SSH_PRIVATE_KEY")
#     - ssh -o StrictHostKeyChecking=no -p 22 root@SET_SITE_NAME bash /home/www/SET_INSTALATION_PATH/deploy.sh
#   only:
#     - master
#   when: manual