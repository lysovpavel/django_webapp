# Generated by Django 2.0.7 on 2019-03-07 12:23

import ckeditor_uploader.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('fcm_django', '0003_auto_20170313_1314'),
    ]

    operations = [
        migrations.CreateModel(
            name='Notify',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(blank=True, default='', max_length=255, verbose_name='Тема')),
                ('text', models.TextField(verbose_name='Текст')),
                ('html', models.TextField(blank=True, default='', verbose_name='HTML')),
                ('email', models.EmailField(blank=True, help_text='Используется только в случае отсутствия указанного пользователя', max_length=255, null=True, verbose_name='Email Получателя')),
                ('phone', models.CharField(blank=True, help_text='Используется только в случае отсутствия указанного пользователя', max_length=20, null=True, verbose_name='Телефон отправителя')),
                ('type', models.IntegerField(choices=[(0, 'E-mail'), (1, 'SMS'), (2, 'Push')], verbose_name='Тип')),
                ('state', models.IntegerField(choices=[(1, 'Доставлено'), (-1, 'Отклонено'), (0, 'В ожидании'), (-2, 'Не отправлено (отправка запрещена настройками)')], default=0, verbose_name='Состояние')),
                ('event', models.IntegerField(blank=True, choices=[(1, 'Регистрация')], null=True, verbose_name='Событие')),
                ('is_read', models.BooleanField(default=False, verbose_name='Прочитано')),
                ('data_json', models.TextField(blank=True, null=True, verbose_name='Данные пуш-уведомления (JSON)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата отправки')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
            },
        ),
        migrations.CreateModel(
            name='NotifyCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('template', models.TextField(default='{{text}}', verbose_name='Шаблон')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='NotifyConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('periodic', models.IntegerField(default=60, verbose_name='Периодичность отправки уведомлений (сек.)')),
                ('email_max_day_limit', models.IntegerField(default=240, verbose_name='Дневной лимит отправки писем')),
                ('email_max_hour_limit', models.IntegerField(default=40, verbose_name='Часовой лимит отправки писем')),
                ('sms_url', models.CharField(default='http://sms.ru/sms/send', max_length=255, verbose_name='URL СМС провайдера')),
                ('sms_api_id', models.CharField(blank=True, default='1234567890', max_length=255, verbose_name='API ID СМС провайдера')),
                ('sms_from', models.CharField(blank=True, default='', help_text='Например, Garpix', max_length=255, verbose_name='Отправитель СМС')),
                ('is_email_enabled', models.BooleanField(default=True, verbose_name='Разрешить отправку Email')),
                ('is_sms_enabled', models.BooleanField(default=True, verbose_name='Разрешить отправку SMS')),
                ('is_push_enabled', models.BooleanField(default=True, verbose_name='Разрешить отправку PUSH')),
            ],
            options={
                'verbose_name': 'Настройка',
                'verbose_name_plural': 'Настройки',
            },
        ),
        migrations.CreateModel(
            name='NotifyFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=1000, upload_to='', verbose_name='Файл')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Файл',
                'verbose_name_plural': 'Файлы',
            },
        ),
        migrations.CreateModel(
            name='NotifyTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название для админа')),
                ('subject', models.CharField(blank=True, default='', max_length=255, verbose_name='Заголовок')),
                ('text', models.TextField(verbose_name='Текст')),
                ('html', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='HTML')),
                ('email', models.EmailField(blank=True, help_text='Используется только в случае отсутствия указанного пользователя', max_length=255, null=True, verbose_name='Email получатель')),
                ('phone', models.CharField(blank=True, help_text='Используется только в случае отсутствия указанного пользователя', max_length=20, null=True, verbose_name='Телефон получатель')),
                ('type', models.IntegerField(choices=[(0, 'E-mail'), (1, 'SMS'), (2, 'Push')], verbose_name='Тип')),
                ('event', models.IntegerField(blank=True, choices=[(1, 'Регистрация')], null=True, verbose_name='Событие')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активный')),
            ],
            options={
                'verbose_name': 'Шаблон',
                'verbose_name_plural': 'Шаблоны',
            },
        ),
        migrations.CreateModel(
            name='NotifyUserList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название списка пользователей')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Список пользователей для рассылки',
                'verbose_name_plural': 'Списки пользователей для рассылки',
            },
        ),
        migrations.CreateModel(
            name='NotifyUserListParticipant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('email', models.EmailField(blank=True, help_text='Используется только в случае отсутствия указанного пользователя', max_length=255, null=True, verbose_name='Email Получателя')),
                ('phone', models.CharField(blank=True, help_text='Используется только в случае отсутствия указанного пользователя', max_length=20, null=True, verbose_name='Телефон отправителя')),
            ],
            options={
                'verbose_name': 'Участник списка пользователей',
                'verbose_name_plural': 'Участники списка пользователей',
            },
        ),
        migrations.CreateModel(
            name='SMTPAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.CharField(default='smtp.yandex.ru', max_length=255, verbose_name='Хост')),
                ('port', models.IntegerField(default=587, verbose_name='Порт')),
                ('is_use_tls', models.BooleanField(default=True, verbose_name='Использовать TLS?')),
                ('is_use_ssl', models.BooleanField(default=False, verbose_name='Использовать SSL?')),
                ('sender', models.EmailField(max_length=255, verbose_name='Отправитель')),
                ('username', models.CharField(max_length=255, verbose_name='Имя пользователя')),
                ('password', models.CharField(max_length=255, verbose_name='Пароль пользователя')),
                ('timeout', models.IntegerField(default=5000, verbose_name='Таймаут (сек.)')),
                ('email_hour_used_times', models.IntegerField(default=0, verbose_name='Количество использований в час')),
                ('email_day_used_times', models.IntegerField(default=0, verbose_name='Количество использований в день')),
                ('email_hour_used_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата использований в час')),
                ('email_day_used_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата использований в день')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='garpix_notify.NotifyCategory', verbose_name='Тип')),
            ],
            options={
                'verbose_name': 'SMTP аккаунт',
                'verbose_name_plural': 'SMTP аккаунты',
            },
        ),
        migrations.CreateModel(
            name='NotifyDevice',
            fields=[
            ],
            options={
                'verbose_name': 'FCM аккаунт',
                'verbose_name_plural': 'FCM аккаунты',
                'proxy': True,
                'indexes': [],
            },
            bases=('fcm_django.fcmdevice',),
        ),
    ]
